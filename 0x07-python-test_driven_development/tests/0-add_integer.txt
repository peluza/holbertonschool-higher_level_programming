0 - add integer:

Import module:

    >>> add_integer = __import__('0-add_integer').add_integer

Funtion:
writhe a funtion tat adds two integer.

Operations:
 ‘a’ and ‘b’ must be integers or float:

test #0: add two integer 
    >>> add_integer(1, 2)
    3

test #1: add value a is integer positive and b is integer negative
    >>> add_integer(100, -2)
    98

test #2: add value a is integer positive and b is None
    >>> add_integer(2)
    100

test #3: add value a is float and b is integer negative
    >>> add_integer(100.3, -2)
    98

test #4: add value a is integer negative and b is integer positive
    >>> add_integer(-2, 100)
    98

test #5: add value a is float negative and b is integer positive
    >>> add_integer(-100.3, 2)
    -98

test #6: add value a is float negative and b is integer negative
    >>> add_integer(-100.3, -2)
    -102

test #6: add value a is float negative and b is float negative
    >>> add_integer(-100.3, -2.2)
    -102

test #7 add value a is None and b is positive
    >>> add_integer(None, 100)
    Traceback (most recent call last):
    TypeError: a must be an integer

test #8 add value a is positve and b is None
    >>> add_integer(6, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

Test #9: function without parameters
    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

Test #10: add value a is not defined and b is positive
    >>> add_integer(a, 123)
    Traceback (most recent call last):
    NameError: name 'a' is not defined

Test #11: add value a is integer and b is not defined
    >>> add_integer(123, b)
    Traceback (most recent call last):
    NameError: name 'b' is not defined

Test #12: return is at integer
    >>> type(add_integer(2, 3))
    <class 'int'>

test #13: add value a is string cast at integer positive and b is string cast at integer positive
    >>> add_integer(int("100"), int("2"))
    102

test #14: add value a is string cast at integer negative and b is string cast at integer negative
    >>> add_integer(int("-100"), int("-2"))
    -102

test #15: add value a is string cast at float at integer negative and b is string cast at float at integer positive
    >>> add_integer(int(float("100.2")), int(float("2.2")))
    102

test #16: add value a  cast at float positive and b is cast at float positive
    >>> add_integer(float("100.2"), float("2.2"))
    102